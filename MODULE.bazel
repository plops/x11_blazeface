module(
    name = "blazeface_hermetic",
    version = "1.0",
)

# --- Bazel Central Registry (BCR) Dependencies ---
bazel_dep(name = "libx11", version = "1.8.12.bcr.1")
#bazel_dep(name = "libxext", version = "1.3.5")
#bazel_dep(name = "libxfixes", version = "6.0.1")

# --- Git-based Dependencies ---

# First, depend on bazel_tools, which provides the repository rules.
#bazel_dep(name = "bazel_tools")

# Second, use `use_repo_rule` to get a callable proxy for the `git_repository` rule.

git = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

# Now, define the LiteRT repository.
# This will make a repository named `@litert` available to our project.
# git(
#     name = "litert",
#     # Use a specific commit hash for a reproducible build
#     commit = "7e0085a6a12518e959ef91448b1d9111b15743c5",
#     remote = "https://github.com/google-ai-edge/LiteRT.git",
# )



# Now, call the proxy `git()` as if it were the `git_repository` function itself.
git(
    name = "litert",
    # This is the specific commit with my Gentoo fix
    commit = "01841adc08014117217ffdb39767abf109fb90c7",
    # This is the URL of my fork
    remote = "https://github.com/plops/LiteRT.git",
)

# --- Module Extension for LiteRT's Legacy Dependencies ---
# Load our extension from the .bzl file we created.
litert_ext = use_extension("//:litert_ext.bzl", "litert_deps")

# "Use" the repositories defined inside the extension. This makes them
# visible to the entire build graph, including @litert.
use_repo(litert_ext, "bazel_skylib", "rules_shell", "rules_ml_toolchain", "rules_cc")
