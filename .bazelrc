# A minimal .bazelrc for the x11_blazeface project.

build --repo_env=USE_PYWRAP_RULES=True
build --copt=-DGRPC_BAZEL_BUILD
build --host_copt=-DGRPC_BAZEL_BUILD
build --action_env=GRPC_BAZEL_RUNTIME=1
build --repo_env=PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=upb
build --action_env=PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=upb
build --repo_env=RULES_PYTHON_ENABLE_PYSTAR=0
# Do not do this. This is how gRPC builds itself by default, but we don't want
# that as it would link protobuf into its own set of dynamic libraries, which
# would conflict with our protobuf linkage.
#build --define=use_fast_cpp_protos=true

# For projects which use TensorFlow as part of a Bazel build process, putting
# nothing in a bazelrc will default to a monolithic build. The following line
# opts in to modular op registration support by default.
build --define framework_shared_object=true
build --define tsl_protobuf_header_only=true

build --define=allow_oversize_protos=true

build --spawn_strategy=standalone
build -c opt

# Make Bazel print out all options from rc files.
build --announce_rc

# TODO(mihaimaruseac): Document this option or remove if no longer needed
build --define=grpc_no_ares=true

# See https://github.com/bazelbuild/bazel/issues/7362 for information on what
# --incompatible_remove_legacy_whole_archive flag does.
# This flag is set to true in Bazel 1.0 and newer versions. We tried to migrate
# Tensorflow to the default, however test coverage wasn't enough to catch the
# errors.
# There is ongoing work on Bazel team's side to provide support for transitive
# shared libraries. As part of migrating to transitive shared libraries, we
# hope to provide a better mechanism for control over symbol exporting, and
# then tackle this issue again.
#
# TODO: Remove the following two lines once TF doesn't depend on Bazel wrapping
# all library archives in -whole_archive -no_whole_archive.
build --noincompatible_remove_legacy_whole_archive
build --features=-force_no_whole_archive
build --host_features=-force_no_whole_archive

# TODO(mihaimaruseac): Document this option or remove if no longer needed
build --enable_platform_specific_config

# Enable XLA support by default.
build --define=with_xla_support=false #true

# TODO(mihaimaruseac): Document this option or remove if no longer needed
build --config=short_logs

# TF now has `cc_shared_library` targets, so it needs the experimental flag
# TODO(rostam): Remove when `cc_shared_library` is enabled by default
build --experimental_cc_shared_library

# cc_shared_library ensures no library is linked statically more than once.
build --experimental_link_static_libraries_once=false

# Prevent regressions on those two incompatible changes
# TODO: remove those flags when they are flipped in the default Bazel version TF uses.
build --incompatible_enforce_config_setting_visibility
# TODO: also enable this flag after fixing the visibility violations
# build --incompatible_config_setting_private_default_visibility

# Default options should come above this line.

# Enforce clang as C/C++ compiler on Linux.
#build:linux --action_env=CC=clang
#build:linux --action_env=CXX=clang++

# Set the C++ standard to C++20, which is required by the source code.
build --cxxopt=-std=c++20
build --host_cxxopt=-std=c++20


# FIX: Disable the -Wchanges-meaning warning, which causes errors when
# compiling the LiteRT dependency with modern versions of GCC.
build --cxxopt=-Wno-changes-meaning
build --cxxopt=-Wno-sign-compare
build --cxxopt=-march=native

# Continue using the WORKSPACE resolution system for now.
common --noenable_bzlmod

# REQUIRED: Enable an experimental feature that TensorFlow's workspace
# scripts depend on for evaluation.
common --experimental_repo_remote_exec

# Config to use a mostly-static build and disable modular op registration
# support (this will revert to loading TensorFlow with RTLD_GLOBAL in Python).
# By default, TensorFlow will build with a dependence on
# //tensorflow:libtensorflow_framework.so.
build:monolithic --define framework_shared_object=false
build:monolithic --define tsl_protobuf_header_only=false
build:monolithic --experimental_link_static_libraries_once=false  # b/229868128

# Debug config
build:dbg -c dbg
# Only include debug info for files under tensorflow/, excluding kernels, to
# reduce the size of the debug info in the binary. This is because if the debug
# sections in the ELF binary are too large, errors can occur. See
# https://github.com/tensorflow/tensorflow/issues/48919.
# Users can still include debug info for a specific kernel, e.g. with:
#     --config=dbg --per_file_copt=+tensorflow/core/kernels/identity_op.*@-g
# Since this .bazelrc file is synced between the tensorflow/tensorflow repo and
# the openxla/xla repo, also include debug info for files under xla/.
build:dbg --per_file_copt=+.*,-tensorflow.*,-xla.*@-g0
build:dbg --per_file_copt=+tensorflow/core/kernels.*@-g0
# for now, disable arm_neon. see: https://github.com/tensorflow/tensorflow/issues/33360
build:dbg --cxxopt -DTF_LITE_DISABLE_X86_NEON
# AWS SDK must be compiled in release mode. see: https://github.com/tensorflow/tensorflow/issues/37498
build:dbg --copt -DDEBUG_BUILD

# Options to disable default on features
build:nogcp --define=no_gcp_support=true
build:nonccl --define=no_nccl_support=true

# Modular TF build options
build:dynamic_kernels --define=dynamic_loaded_kernels=true
build:dynamic_kernels --copt=-DAUTOLOAD_DYNAMIC_KERNELS


# Suppress all C++ compiler warnings, otherwise build logs become 10s of MBs.
build:linux --host_copt=-w

# Suppress most C++ compiler warnings to reduce log size but allow
# for specific warnings to still be present.
build:linux --copt="-Wno-all"
build:linux --copt="-Wno-extra"
build:linux --copt="-Wno-deprecated"
build:linux --copt="-Wno-deprecated-declarations"
build:linux --copt="-Wno-ignored-attributes"
build:linux --copt="-Wno-array-bounds"

# Add unused-result as an error on Linux.
build:linux --copt="-Wunused-result"
build:linux --copt="-Werror=unused-result"
# Add switch as an error on Linux.
build:linux --copt="-Wswitch"
build:linux --copt="-Werror=switch"
# This was added in clang-16 by https://reviews.llvm.org/D133574.
# Can be removed once upb is updated, since a type definition is used within
# offset of in the current version of ubp.
# See https://github.com/protocolbuffers/upb/blob/9effcbcb27f0a665f9f345030188c0b291e32482/upb/upb.c#L183.
build:linux --copt=-Wno-gnu-offsetof-extensions

# Toolchain and CUDA options for Linux CPU builds
build:release_cpu_linux --crosstool_top="@local_config_cuda//crosstool:toolchain"
build:release_cpu_linux --repo_env=TF_SYSROOT="/dt9"
# Default paths for TF_SYSTEM_LIBS
build:linux --define=PREFIX=/usr
build:linux --define=LIBDIR=$(PREFIX)/lib
build:linux --define=INCLUDEDIR=$(PREFIX)/include
build:linux --define=PROTOBUF_INCLUDE_PATH=$(PREFIX)/include

# On linux, we dynamically link small amount of kernels
build:linux --config=dynamic_kernels
# Do not risk cache corruption. See:
# https://github.com/bazelbuild/bazel/issues/3360
build:linux --experimental_guard_against_concurrent_changes

# Configure short or long logs
build:short_logs --output_filter=DONT_MATCH_ANYTHING
build:verbose_logs --output_filter=

# Instruction set optimizations
# TODO(gunan): Create a feature in toolchains for avx/avx2 to
#   avoid having to define linux/win separately.
build:avx_linux --copt=-mavx
build:avx_linux --host_copt=-mavx


# Assume AVX2 x86_64 platforms for linux.
build:linux --copt=-mavx2

# Config-specific options should come above this line.

# Load rc file written by ./configure.
try-import %workspace%/.tf_configure.bazelrc
try-import %workspace%/xla_configure.bazelrc

# Load rc file with user-specific options.
try-import %workspace%/.bazelrc.user

# Try to load the XLA warnings config if available
try-import %workspace%/warnings.bazelrc

# Options to build TensorFlow 1.x or 2.x.
build:v2 --define=tf_api_version=2 --action_env=TF2_BEHAVIOR=1
build --config=v2

# Options to filter filepath prefixes when generating python api's
build:litert_prefixes --define=litert_prefixes="external/org_tensorflow/"
build --config=litert_prefixes

# Options to disable generating api v2 under tensorflow/lite/python.
# This is not on by default and don't use this flag during wheel generation.
# Remove the flag once tf/lite is fully separated from tf.
build:disable_tf_lite_py --define=disable_tf_lite_py=true

# Config to use a gcs bucket as remote cache.
build:public_cache --remote_cache="https://storage.googleapis.com/litert-bazel-artifacts" --remote_upload_local_results=false

# Cache pushes are limited to CI system.
# WARNING: THIS OPTION WONT WORK IF YOU DO NOT HAVE PROPER AUTHENTICATION AND PERMISSIONS
#build:public_cache_push --config=public_cache --remote_upload_local_results=true --google_default_credentials
